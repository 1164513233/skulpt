/* File automatically generated by asdl_js.py. */



Sk.ast = {}

/* ----- expr_context ----- */
/** @constructor */
Sk.ast.Load = function Load() {}
/** @constructor */
Sk.ast.Store = function Store() {}
/** @constructor */
Sk.ast.Del = function Del() {}
/** @constructor */
Sk.ast.AugLoad = function AugLoad() {}
/** @constructor */
Sk.ast.AugStore = function AugStore() {}
/** @constructor */
Sk.ast.Param = function Param() {}

/* ----- boolop ----- */
/** @constructor */
Sk.ast.And = function And() {}
/** @constructor */
Sk.ast.Or = function Or() {}

/* ----- operator ----- */
/** @constructor */
Sk.ast.Add = function Add() {}
/** @constructor */
Sk.ast.Sub = function Sub() {}
/** @constructor */
Sk.ast.Mult = function Mult() {}
/** @constructor */
Sk.ast.MatMult = function MatMult() {}
/** @constructor */
Sk.ast.Div = function Div() {}
/** @constructor */
Sk.ast.Mod = function Mod() {}
/** @constructor */
Sk.ast.Pow = function Pow() {}
/** @constructor */
Sk.ast.LShift = function LShift() {}
/** @constructor */
Sk.ast.RShift = function RShift() {}
/** @constructor */
Sk.ast.BitOr = function BitOr() {}
/** @constructor */
Sk.ast.BitXor = function BitXor() {}
/** @constructor */
Sk.ast.BitAnd = function BitAnd() {}
/** @constructor */
Sk.ast.FloorDiv = function FloorDiv() {}

/* ----- unaryop ----- */
/** @constructor */
Sk.ast.Invert = function Invert() {}
/** @constructor */
Sk.ast.Not = function Not() {}
/** @constructor */
Sk.ast.UAdd = function UAdd() {}
/** @constructor */
Sk.ast.USub = function USub() {}

/* ----- cmpop ----- */
/** @constructor */
Sk.ast.Eq = function Eq() {}
/** @constructor */
Sk.ast.NotEq = function NotEq() {}
/** @constructor */
Sk.ast.Lt = function Lt() {}
/** @constructor */
Sk.ast.LtE = function LtE() {}
/** @constructor */
Sk.ast.Gt = function Gt() {}
/** @constructor */
Sk.ast.GtE = function GtE() {}
/** @constructor */
Sk.ast.Is = function Is() {}
/** @constructor */
Sk.ast.IsNot = function IsNot() {}
/** @constructor */
Sk.ast.In = function In() {}
/** @constructor */
Sk.ast.NotIn = function NotIn() {}







/* ---------------------- */
/* constructors for nodes */
/* ---------------------- */





/** @constructor */
Sk.ast.Module = function Module(/* {asdl_seq *} */ body, /* {string} */
                                     docstring)
{
    this.body = body;
    this.docstring = docstring;
    return this;
}

/** @constructor */
Sk.ast.Interactive = function Interactive(/* {asdl_seq *} */ body)
{
    this.body = body;
    return this;
}

/** @constructor */
Sk.ast.Expression = function Expression(/* {expr_ty} */ body)
{
    goog.asserts.assert(body !== null && body !== undefined);
    this.body = body;
    return this;
}

/** @constructor */
Sk.ast.Suite = function Suite(/* {asdl_seq *} */ body)
{
    this.body = body;
    return this;
}

/** @constructor */
Sk.ast.FunctionDef = function FunctionDef(/* {identifier} */ name, /*
                                               {arguments_ty} */ args, /*
                                               {asdl_seq *} */ body, /*
                                               {asdl_seq *} */ decorator_list,
                                               /* {expr_ty} */ returns, /*
                                               {string} */ docstring, /* {int}
                                               */ lineno, /* {int} */
                                               col_offset)
{
    goog.asserts.assert(name !== null && name !== undefined);
    goog.asserts.assert(args !== null && args !== undefined);
    this.name = name;
    this.args = args;
    this.body = body;
    this.decorator_list = decorator_list;
    this.returns = returns;
    this.docstring = docstring;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.AsyncFunctionDef = function AsyncFunctionDef(/* {identifier} */ name, /*
                                                         {arguments_ty} */
                                                         args, /* {asdl_seq *}
                                                         */ body, /* {asdl_seq
                                                         *} */ decorator_list,
                                                         /* {expr_ty} */
                                                         returns, /* {string}
                                                         */ docstring, /* {int}
                                                         */ lineno, /* {int} */
                                                         col_offset)
{
    goog.asserts.assert(name !== null && name !== undefined);
    goog.asserts.assert(args !== null && args !== undefined);
    this.name = name;
    this.args = args;
    this.body = body;
    this.decorator_list = decorator_list;
    this.returns = returns;
    this.docstring = docstring;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.ClassDef = function ClassDef(/* {identifier} */ name, /* {asdl_seq *} */
                                         bases, /* {asdl_seq *} */ keywords, /*
                                         {asdl_seq *} */ body, /* {asdl_seq *}
                                         */ decorator_list, /* {string} */
                                         docstring, /* {int} */ lineno, /*
                                         {int} */ col_offset)
{
    goog.asserts.assert(name !== null && name !== undefined);
    this.name = name;
    this.bases = bases;
    this.keywords = keywords;
    this.body = body;
    this.decorator_list = decorator_list;
    this.docstring = docstring;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Return = function Return(/* {expr_ty} */ value, /* {int} */ lineno, /*
                                     {int} */ col_offset)
{
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Delete = function Delete(/* {asdl_seq *} */ targets, /* {int} */ lineno,
                                     /* {int} */ col_offset)
{
    this.targets = targets;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Assign = function Assign(/* {asdl_seq *} */ targets, /* {expr_ty} */
                                     value, /* {int} */ lineno, /* {int} */
                                     col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.targets = targets;
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.AugAssign = function AugAssign(/* {expr_ty} */ target, /* {operator_ty}
                                           */ op, /* {expr_ty} */ value, /*
                                           {int} */ lineno, /* {int} */
                                           col_offset)
{
    goog.asserts.assert(target !== null && target !== undefined);
    goog.asserts.assert(op !== null && op !== undefined);
    goog.asserts.assert(value !== null && value !== undefined);
    this.target = target;
    this.op = op;
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.AnnAssign = function AnnAssign(/* {expr_ty} */ target, /* {expr_ty} */
                                           annotation, /* {expr_ty} */ value,
                                           /* {int} */ simple, /* {int} */
                                           lineno, /* {int} */ col_offset)
{
    goog.asserts.assert(target !== null && target !== undefined);
    goog.asserts.assert(annotation !== null && annotation !== undefined);
    this.target = target;
    this.annotation = annotation;
    this.value = value;
    this.simple = simple;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.For = function For(/* {expr_ty} */ target, /* {expr_ty} */ iter, /*
                               {asdl_seq *} */ body, /* {asdl_seq *} */ orelse,
                               /* {int} */ lineno, /* {int} */ col_offset)
{
    goog.asserts.assert(target !== null && target !== undefined);
    goog.asserts.assert(iter !== null && iter !== undefined);
    this.target = target;
    this.iter = iter;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.AsyncFor = function AsyncFor(/* {expr_ty} */ target, /* {expr_ty} */
                                         iter, /* {asdl_seq *} */ body, /*
                                         {asdl_seq *} */ orelse, /* {int} */
                                         lineno, /* {int} */ col_offset)
{
    goog.asserts.assert(target !== null && target !== undefined);
    goog.asserts.assert(iter !== null && iter !== undefined);
    this.target = target;
    this.iter = iter;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.While = function While(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /*
                                   {asdl_seq *} */ orelse, /* {int} */ lineno,
                                   /* {int} */ col_offset)
{
    goog.asserts.assert(test !== null && test !== undefined);
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.If = function If(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /*
                             {asdl_seq *} */ orelse, /* {int} */ lineno, /*
                             {int} */ col_offset)
{
    goog.asserts.assert(test !== null && test !== undefined);
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.With = function With(/* {asdl_seq *} */ items, /* {asdl_seq *} */ body,
                                 /* {int} */ lineno, /* {int} */ col_offset)
{
    this.items = items;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.AsyncWith = function AsyncWith(/* {asdl_seq *} */ items, /* {asdl_seq *}
                                           */ body, /* {int} */ lineno, /*
                                           {int} */ col_offset)
{
    this.items = items;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Raise = function Raise(/* {expr_ty} */ exc, /* {expr_ty} */ cause, /*
                                   {int} */ lineno, /* {int} */ col_offset)
{
    this.exc = exc;
    this.cause = cause;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Try = function Try(/* {asdl_seq *} */ body, /* {asdl_seq *} */ handlers,
                               /* {asdl_seq *} */ orelse, /* {asdl_seq *} */
                               finalbody, /* {int} */ lineno, /* {int} */
                               col_offset)
{
    this.body = body;
    this.handlers = handlers;
    this.orelse = orelse;
    this.finalbody = finalbody;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Assert = function Assert(/* {expr_ty} */ test, /* {expr_ty} */ msg, /*
                                     {int} */ lineno, /* {int} */ col_offset)
{
    goog.asserts.assert(test !== null && test !== undefined);
    this.test = test;
    this.msg = msg;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Import = function Import(/* {asdl_seq *} */ names, /* {int} */ lineno,
                                     /* {int} */ col_offset)
{
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.ImportFrom = function ImportFrom(/* {identifier} */ module, /* {asdl_seq
                                             *} */ names, /* {int} */ level, /*
                                             {int} */ lineno, /* {int} */
                                             col_offset)
{
    this.module = module;
    this.names = names;
    this.level = level;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Global = function Global(/* {asdl_seq *} */ names, /* {int} */ lineno,
                                     /* {int} */ col_offset)
{
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Nonlocal = function Nonlocal(/* {asdl_seq *} */ names, /* {int} */
                                         lineno, /* {int} */ col_offset)
{
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Expr = function Expr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int}
                                 */ col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Pass = function Pass(/* {int} */ lineno, /* {int} */ col_offset)
{
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Break = function Break(/* {int} */ lineno, /* {int} */ col_offset)
{
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Continue = function Continue(/* {int} */ lineno, /* {int} */ col_offset)
{
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Print = function Print(/* {expr_ty} */ dest, /* {asdl_seq *} */ values,
                                   /* {int} */ nl, /* {int} */ lineno, /* {int}
                                   */ col_offset)
{
    this.dest = dest;
    this.values = values;
    this.nl = nl;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Debugger = function Debugger(/* {int} */ lineno, /* {int} */ col_offset)
{
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.BoolOp = function BoolOp(/* {boolop_ty} */ op, /* {asdl_seq *} */
                                     values, /* {int} */ lineno, /* {int} */
                                     col_offset)
{
    goog.asserts.assert(op !== null && op !== undefined);
    this.op = op;
    this.values = values;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.BinOp = function BinOp(/* {expr_ty} */ left, /* {operator_ty} */ op, /*
                                   {expr_ty} */ right, /* {int} */ lineno, /*
                                   {int} */ col_offset)
{
    goog.asserts.assert(left !== null && left !== undefined);
    goog.asserts.assert(op !== null && op !== undefined);
    goog.asserts.assert(right !== null && right !== undefined);
    this.left = left;
    this.op = op;
    this.right = right;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.UnaryOp = function UnaryOp(/* {unaryop_ty} */ op, /* {expr_ty} */
                                       operand, /* {int} */ lineno, /* {int} */
                                       col_offset)
{
    goog.asserts.assert(op !== null && op !== undefined);
    goog.asserts.assert(operand !== null && operand !== undefined);
    this.op = op;
    this.operand = operand;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Lambda = function Lambda(/* {arguments_ty} */ args, /* {expr_ty} */
                                     body, /* {int} */ lineno, /* {int} */
                                     col_offset)
{
    goog.asserts.assert(args !== null && args !== undefined);
    goog.asserts.assert(body !== null && body !== undefined);
    this.args = args;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.IfExp = function IfExp(/* {expr_ty} */ test, /* {expr_ty} */ body, /*
                                   {expr_ty} */ orelse, /* {int} */ lineno, /*
                                   {int} */ col_offset)
{
    goog.asserts.assert(test !== null && test !== undefined);
    goog.asserts.assert(body !== null && body !== undefined);
    goog.asserts.assert(orelse !== null && orelse !== undefined);
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Dict = function Dict(/* {asdl_seq *} */ keys, /* {asdl_seq *} */ values,
                                 /* {int} */ lineno, /* {int} */ col_offset)
{
    this.keys = keys;
    this.values = values;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Set = function Set(/* {asdl_seq *} */ elts, /* {int} */ lineno, /* {int}
                               */ col_offset)
{
    this.elts = elts;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.ListComp = function ListComp(/* {expr_ty} */ elt, /* {asdl_seq *} */
                                         generators, /* {int} */ lineno, /*
                                         {int} */ col_offset)
{
    goog.asserts.assert(elt !== null && elt !== undefined);
    this.elt = elt;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.SetComp = function SetComp(/* {expr_ty} */ elt, /* {asdl_seq *} */
                                       generators, /* {int} */ lineno, /* {int}
                                       */ col_offset)
{
    goog.asserts.assert(elt !== null && elt !== undefined);
    this.elt = elt;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.DictComp = function DictComp(/* {expr_ty} */ key, /* {expr_ty} */ value,
                                         /* {asdl_seq *} */ generators, /*
                                         {int} */ lineno, /* {int} */
                                         col_offset)
{
    goog.asserts.assert(key !== null && key !== undefined);
    goog.asserts.assert(value !== null && value !== undefined);
    this.key = key;
    this.value = value;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.GeneratorExp = function GeneratorExp(/* {expr_ty} */ elt, /* {asdl_seq
                                                 *} */ generators, /* {int} */
                                                 lineno, /* {int} */ col_offset)
{
    goog.asserts.assert(elt !== null && elt !== undefined);
    this.elt = elt;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Await = function Await(/* {expr_ty} */ value, /* {int} */ lineno, /*
                                   {int} */ col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Yield = function Yield(/* {expr_ty} */ value, /* {int} */ lineno, /*
                                   {int} */ col_offset)
{
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.YieldFrom = function YieldFrom(/* {expr_ty} */ value, /* {int} */
                                           lineno, /* {int} */ col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Compare = function Compare(/* {expr_ty} */ left, /* {asdl_int_seq *} */
                                       ops, /* {asdl_seq *} */ comparators, /*
                                       {int} */ lineno, /* {int} */ col_offset)
{
    goog.asserts.assert(left !== null && left !== undefined);
    this.left = left;
    this.ops = ops;
    this.comparators = comparators;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Call = function Call(/* {expr_ty} */ func, /* {asdl_seq *} */ args, /*
                                 {asdl_seq *} */ keywords, /* {int} */ lineno,
                                 /* {int} */ col_offset)
{
    goog.asserts.assert(func !== null && func !== undefined);
    this.func = func;
    this.args = args;
    this.keywords = keywords;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Num = function Num(/* {object} */ n, /* {int} */ lineno, /* {int} */
                               col_offset)
{
    goog.asserts.assert(n !== null && n !== undefined);
    this.n = n;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Str = function Str(/* {string} */ s, /* {int} */ lineno, /* {int} */
                               col_offset)
{
    goog.asserts.assert(s !== null && s !== undefined);
    this.s = s;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.FormattedValue = function FormattedValue(/* {expr_ty} */ value, /* {int}
                                                     */ conversion, /*
                                                     {expr_ty} */ format_spec,
                                                     /* {int} */ lineno, /*
                                                     {int} */ col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.value = value;
    this.conversion = conversion;
    this.format_spec = format_spec;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.JoinedStr = function JoinedStr(/* {asdl_seq *} */ values, /* {int} */
                                           lineno, /* {int} */ col_offset)
{
    this.values = values;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Bytes = function Bytes(/* {bytes} */ s, /* {int} */ lineno, /* {int} */
                                   col_offset)
{
    goog.asserts.assert(s !== null && s !== undefined);
    this.s = s;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.NameConstant = function NameConstant(/* {singleton} */ value, /* {int}
                                                 */ lineno, /* {int} */
                                                 col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Ellipsis = function Ellipsis(/* {int} */ lineno, /* {int} */ col_offset)
{
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Constant = function Constant(/* {constant} */ value, /* {int} */ lineno,
                                         /* {int} */ col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Attribute = function Attribute(/* {expr_ty} */ value, /* {identifier} */
                                           attr, /* {expr_context_ty} */ ctx,
                                           /* {int} */ lineno, /* {int} */
                                           col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    goog.asserts.assert(attr !== null && attr !== undefined);
    goog.asserts.assert(ctx !== null && ctx !== undefined);
    this.value = value;
    this.attr = attr;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Subscript = function Subscript(/* {expr_ty} */ value, /* {slice_ty} */
                                           slice, /* {expr_context_ty} */ ctx,
                                           /* {int} */ lineno, /* {int} */
                                           col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    goog.asserts.assert(slice !== null && slice !== undefined);
    goog.asserts.assert(ctx !== null && ctx !== undefined);
    this.value = value;
    this.slice = slice;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Starred = function Starred(/* {expr_ty} */ value, /* {expr_context_ty}
                                       */ ctx, /* {int} */ lineno, /* {int} */
                                       col_offset)
{
    goog.asserts.assert(value !== null && value !== undefined);
    goog.asserts.assert(ctx !== null && ctx !== undefined);
    this.value = value;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Name = function Name(/* {identifier} */ id, /* {expr_context_ty} */ ctx,
                                 /* {int} */ lineno, /* {int} */ col_offset)
{
    goog.asserts.assert(id !== null && id !== undefined);
    goog.asserts.assert(ctx !== null && ctx !== undefined);
    this.id = id;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.List = function List(/* {asdl_seq *} */ elts, /* {expr_context_ty} */
                                 ctx, /* {int} */ lineno, /* {int} */
                                 col_offset)
{
    goog.asserts.assert(ctx !== null && ctx !== undefined);
    this.elts = elts;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Tuple = function Tuple(/* {asdl_seq *} */ elts, /* {expr_context_ty} */
                                   ctx, /* {int} */ lineno, /* {int} */
                                   col_offset)
{
    goog.asserts.assert(ctx !== null && ctx !== undefined);
    this.elts = elts;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.Slice = function Slice(/* {expr_ty} */ lower, /* {expr_ty} */ upper, /*
                                   {expr_ty} */ step)
{
    this.lower = lower;
    this.upper = upper;
    this.step = step;
    return this;
}

/** @constructor */
Sk.ast.ExtSlice = function ExtSlice(/* {asdl_seq *} */ dims)
{
    this.dims = dims;
    return this;
}

/** @constructor */
Sk.ast.Index = function Index(/* {expr_ty} */ value)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.value = value;
    return this;
}

/** @constructor */
Sk.ast.comprehension = function comprehension(/* {expr_ty} */ target, /*
                                                   {expr_ty} */ iter, /*
                                                   {asdl_seq *} */ ifs, /*
                                                   {int} */ is_async)
{
    goog.asserts.assert(target !== null && target !== undefined);
    goog.asserts.assert(iter !== null && iter !== undefined);
    this.target = target;
    this.iter = iter;
    this.ifs = ifs;
    this.is_async = is_async;
    return this;
}

/** @constructor */
Sk.ast.ExceptHandler = function ExceptHandler(/* {expr_ty} */ type, /*
                                                   {identifier} */ name, /*
                                                   {asdl_seq *} */ body, /*
                                                   {int} */ lineno, /* {int} */
                                                   col_offset)
{
    this.type = type;
    this.name = name;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}

/** @constructor */
Sk.ast.arguments = function arguments(/* {asdl_seq *} */ args, /* {arg_ty} */
                                           vararg, /* {asdl_seq *} */
                                           kwonlyargs, /* {asdl_seq *} */
                                           kw_defaults, /* {arg_ty} */ kwarg,
                                           /* {asdl_seq *} */ defaults)
{
    this.args = args;
    this.vararg = vararg;
    this.kwonlyargs = kwonlyargs;
    this.kw_defaults = kw_defaults;
    this.kwarg = kwarg;
    this.defaults = defaults;
    return this;
}

/** @constructor */
Sk.ast.arg = function arg(/* {identifier} */ arg, /* {expr_ty} */ annotation)
{
    goog.asserts.assert(arg !== null && arg !== undefined);
    this.arg = arg;
    this.annotation = annotation;
    return this;
}

/** @constructor */
Sk.ast.keyword = function keyword(/* {identifier} */ arg, /* {expr_ty} */ value)
{
    goog.asserts.assert(value !== null && value !== undefined);
    this.arg = arg;
    this.value = value;
    return this;
}

/** @constructor */
Sk.ast.alias = function alias(/* {identifier} */ name, /* {identifier} */
                                   asname)
{
    goog.asserts.assert(name !== null && name !== undefined);
    this.name = name;
    this.asname = asname;
    return this;
}

/** @constructor */
Sk.ast.withitem = function withitem(/* {expr_ty} */ context_expr, /* {expr_ty}
                                         */ optional_vars)
{
    goog.asserts.assert(context_expr !== null && context_expr !== undefined);
    this.context_expr = context_expr;
    this.optional_vars = optional_vars;
    return this;
}


Sk.ast.Module.prototype._astname = "Module";
Sk.ast.Module.prototype._fields = [
    "body", function(n) { return n.body; },
    "docstring", function(n) { return n.docstring; }
];
Sk.ast.Interactive.prototype._astname = "Interactive";
Sk.ast.Interactive.prototype._fields = [
    "body", function(n) { return n.body; }
];
Sk.ast.Expression.prototype._astname = "Expression";
Sk.ast.Expression.prototype._fields = [
    "body", function(n) { return n.body; }
];
Sk.ast.Suite.prototype._astname = "Suite";
Sk.ast.Suite.prototype._fields = [
    "body", function(n) { return n.body; }
];
Sk.ast.FunctionDef.prototype._astname = "FunctionDef";
Sk.ast.FunctionDef.prototype._fields = [
    "name", function(n) { return n.name; },
    "args", function(n) { return n.args; },
    "body", function(n) { return n.body; },
    "decorator_list", function(n) { return n.decorator_list; },
    "returns", function(n) { return n.returns; },
    "docstring", function(n) { return n.docstring; }
];
Sk.ast.AsyncFunctionDef.prototype._astname = "AsyncFunctionDef";
Sk.ast.AsyncFunctionDef.prototype._fields = [
    "name", function(n) { return n.name; },
    "args", function(n) { return n.args; },
    "body", function(n) { return n.body; },
    "decorator_list", function(n) { return n.decorator_list; },
    "returns", function(n) { return n.returns; },
    "docstring", function(n) { return n.docstring; }
];
Sk.ast.ClassDef.prototype._astname = "ClassDef";
Sk.ast.ClassDef.prototype._fields = [
    "name", function(n) { return n.name; },
    "bases", function(n) { return n.bases; },
    "keywords", function(n) { return n.keywords; },
    "body", function(n) { return n.body; },
    "decorator_list", function(n) { return n.decorator_list; },
    "docstring", function(n) { return n.docstring; }
];
Sk.ast.Return.prototype._astname = "Return";
Sk.ast.Return.prototype._fields = [
    "value", function(n) { return n.value; }
];
Sk.ast.Delete.prototype._astname = "Delete";
Sk.ast.Delete.prototype._fields = [
    "targets", function(n) { return n.targets; }
];
Sk.ast.Assign.prototype._astname = "Assign";
Sk.ast.Assign.prototype._fields = [
    "targets", function(n) { return n.targets; },
    "value", function(n) { return n.value; }
];
Sk.ast.AugAssign.prototype._astname = "AugAssign";
Sk.ast.AugAssign.prototype._fields = [
    "target", function(n) { return n.target; },
    "op", function(n) { return n.op; },
    "value", function(n) { return n.value; }
];
Sk.ast.AnnAssign.prototype._astname = "AnnAssign";
Sk.ast.AnnAssign.prototype._fields = [
    "target", function(n) { return n.target; },
    "annotation", function(n) { return n.annotation; },
    "value", function(n) { return n.value; },
    "simple", function(n) { return n.simple; }
];
Sk.ast.For.prototype._astname = "For";
Sk.ast.For.prototype._fields = [
    "target", function(n) { return n.target; },
    "iter", function(n) { return n.iter; },
    "body", function(n) { return n.body; },
    "orelse", function(n) { return n.orelse; }
];
Sk.ast.AsyncFor.prototype._astname = "AsyncFor";
Sk.ast.AsyncFor.prototype._fields = [
    "target", function(n) { return n.target; },
    "iter", function(n) { return n.iter; },
    "body", function(n) { return n.body; },
    "orelse", function(n) { return n.orelse; }
];
Sk.ast.While.prototype._astname = "While";
Sk.ast.While.prototype._fields = [
    "test", function(n) { return n.test; },
    "body", function(n) { return n.body; },
    "orelse", function(n) { return n.orelse; }
];
Sk.ast.If.prototype._astname = "If";
Sk.ast.If.prototype._fields = [
    "test", function(n) { return n.test; },
    "body", function(n) { return n.body; },
    "orelse", function(n) { return n.orelse; }
];
Sk.ast.With.prototype._astname = "With";
Sk.ast.With.prototype._fields = [
    "items", function(n) { return n.items; },
    "body", function(n) { return n.body; }
];
Sk.ast.AsyncWith.prototype._astname = "AsyncWith";
Sk.ast.AsyncWith.prototype._fields = [
    "items", function(n) { return n.items; },
    "body", function(n) { return n.body; }
];
Sk.ast.Raise.prototype._astname = "Raise";
Sk.ast.Raise.prototype._fields = [
    "exc", function(n) { return n.exc; },
    "cause", function(n) { return n.cause; }
];
Sk.ast.Try.prototype._astname = "Try";
Sk.ast.Try.prototype._fields = [
    "body", function(n) { return n.body; },
    "handlers", function(n) { return n.handlers; },
    "orelse", function(n) { return n.orelse; },
    "finalbody", function(n) { return n.finalbody; }
];
Sk.ast.Assert.prototype._astname = "Assert";
Sk.ast.Assert.prototype._fields = [
    "test", function(n) { return n.test; },
    "msg", function(n) { return n.msg; }
];
Sk.ast.Import.prototype._astname = "Import";
Sk.ast.Import.prototype._fields = [
    "names", function(n) { return n.names; }
];
Sk.ast.ImportFrom.prototype._astname = "ImportFrom";
Sk.ast.ImportFrom.prototype._fields = [
    "module", function(n) { return n.module; },
    "names", function(n) { return n.names; },
    "level", function(n) { return n.level; }
];
Sk.ast.Global.prototype._astname = "Global";
Sk.ast.Global.prototype._fields = [
    "names", function(n) { return n.names; }
];
Sk.ast.Nonlocal.prototype._astname = "Nonlocal";
Sk.ast.Nonlocal.prototype._fields = [
    "names", function(n) { return n.names; }
];
Sk.ast.Expr.prototype._astname = "Expr";
Sk.ast.Expr.prototype._fields = [
    "value", function(n) { return n.value; }
];
Sk.ast.Pass.prototype._astname = "Pass";
Sk.ast.Pass.prototype._fields = [
];
Sk.ast.Break.prototype._astname = "Break";
Sk.ast.Break.prototype._fields = [
];
Sk.ast.Continue.prototype._astname = "Continue";
Sk.ast.Continue.prototype._fields = [
];
Sk.ast.Print.prototype._astname = "Print";
Sk.ast.Print.prototype._fields = [
    "dest", function(n) { return n.dest; },
    "values", function(n) { return n.values; },
    "nl", function(n) { return n.nl; }
];
Sk.ast.Debugger.prototype._astname = "Debugger";
Sk.ast.Debugger.prototype._fields = [
];
Sk.ast.BoolOp.prototype._astname = "BoolOp";
Sk.ast.BoolOp.prototype._fields = [
    "op", function(n) { return n.op; },
    "values", function(n) { return n.values; }
];
Sk.ast.BinOp.prototype._astname = "BinOp";
Sk.ast.BinOp.prototype._fields = [
    "left", function(n) { return n.left; },
    "op", function(n) { return n.op; },
    "right", function(n) { return n.right; }
];
Sk.ast.UnaryOp.prototype._astname = "UnaryOp";
Sk.ast.UnaryOp.prototype._fields = [
    "op", function(n) { return n.op; },
    "operand", function(n) { return n.operand; }
];
Sk.ast.Lambda.prototype._astname = "Lambda";
Sk.ast.Lambda.prototype._fields = [
    "args", function(n) { return n.args; },
    "body", function(n) { return n.body; }
];
Sk.ast.IfExp.prototype._astname = "IfExp";
Sk.ast.IfExp.prototype._fields = [
    "test", function(n) { return n.test; },
    "body", function(n) { return n.body; },
    "orelse", function(n) { return n.orelse; }
];
Sk.ast.Dict.prototype._astname = "Dict";
Sk.ast.Dict.prototype._fields = [
    "keys", function(n) { return n.keys; },
    "values", function(n) { return n.values; }
];
Sk.ast.Set.prototype._astname = "Set";
Sk.ast.Set.prototype._fields = [
    "elts", function(n) { return n.elts; }
];
Sk.ast.ListComp.prototype._astname = "ListComp";
Sk.ast.ListComp.prototype._fields = [
    "elt", function(n) { return n.elt; },
    "generators", function(n) { return n.generators; }
];
Sk.ast.SetComp.prototype._astname = "SetComp";
Sk.ast.SetComp.prototype._fields = [
    "elt", function(n) { return n.elt; },
    "generators", function(n) { return n.generators; }
];
Sk.ast.DictComp.prototype._astname = "DictComp";
Sk.ast.DictComp.prototype._fields = [
    "key", function(n) { return n.key; },
    "value", function(n) { return n.value; },
    "generators", function(n) { return n.generators; }
];
Sk.ast.GeneratorExp.prototype._astname = "GeneratorExp";
Sk.ast.GeneratorExp.prototype._fields = [
    "elt", function(n) { return n.elt; },
    "generators", function(n) { return n.generators; }
];
Sk.ast.Await.prototype._astname = "Await";
Sk.ast.Await.prototype._fields = [
    "value", function(n) { return n.value; }
];
Sk.ast.Yield.prototype._astname = "Yield";
Sk.ast.Yield.prototype._fields = [
    "value", function(n) { return n.value; }
];
Sk.ast.YieldFrom.prototype._astname = "YieldFrom";
Sk.ast.YieldFrom.prototype._fields = [
    "value", function(n) { return n.value; }
];
Sk.ast.Compare.prototype._astname = "Compare";
Sk.ast.Compare.prototype._fields = [
    "left", function(n) { return n.left; },
    "ops", function(n) { return n.ops; },
    "comparators", function(n) { return n.comparators; }
];
Sk.ast.Call.prototype._astname = "Call";
Sk.ast.Call.prototype._fields = [
    "func", function(n) { return n.func; },
    "args", function(n) { return n.args; },
    "keywords", function(n) { return n.keywords; }
];
Sk.ast.Num.prototype._astname = "Num";
Sk.ast.Num.prototype._fields = [
    "n", function(n) { return n.n; }
];
Sk.ast.Str.prototype._astname = "Str";
Sk.ast.Str.prototype._fields = [
    "s", function(n) { return n.s; }
];
Sk.ast.FormattedValue.prototype._astname = "FormattedValue";
Sk.ast.FormattedValue.prototype._fields = [
    "value", function(n) { return n.value; },
    "conversion", function(n) { return n.conversion; },
    "format_spec", function(n) { return n.format_spec; }
];
Sk.ast.JoinedStr.prototype._astname = "JoinedStr";
Sk.ast.JoinedStr.prototype._fields = [
    "values", function(n) { return n.values; }
];
Sk.ast.Bytes.prototype._astname = "Bytes";
Sk.ast.Bytes.prototype._fields = [
    "s", function(n) { return n.s; }
];
Sk.ast.NameConstant.prototype._astname = "NameConstant";
Sk.ast.NameConstant.prototype._fields = [
    "value", function(n) { return n.value; }
];
Sk.ast.Ellipsis.prototype._astname = "Ellipsis";
Sk.ast.Ellipsis.prototype._fields = [
];
Sk.ast.Constant.prototype._astname = "Constant";
Sk.ast.Constant.prototype._fields = [
    "value", function(n) { return n.value; }
];
Sk.ast.Attribute.prototype._astname = "Attribute";
Sk.ast.Attribute.prototype._fields = [
    "value", function(n) { return n.value; },
    "attr", function(n) { return n.attr; },
    "ctx", function(n) { return n.ctx; }
];
Sk.ast.Subscript.prototype._astname = "Subscript";
Sk.ast.Subscript.prototype._fields = [
    "value", function(n) { return n.value; },
    "slice", function(n) { return n.slice; },
    "ctx", function(n) { return n.ctx; }
];
Sk.ast.Starred.prototype._astname = "Starred";
Sk.ast.Starred.prototype._fields = [
    "value", function(n) { return n.value; },
    "ctx", function(n) { return n.ctx; }
];
Sk.ast.Name.prototype._astname = "Name";
Sk.ast.Name.prototype._fields = [
    "id", function(n) { return n.id; },
    "ctx", function(n) { return n.ctx; }
];
Sk.ast.List.prototype._astname = "List";
Sk.ast.List.prototype._fields = [
    "elts", function(n) { return n.elts; },
    "ctx", function(n) { return n.ctx; }
];
Sk.ast.Tuple.prototype._astname = "Tuple";
Sk.ast.Tuple.prototype._fields = [
    "elts", function(n) { return n.elts; },
    "ctx", function(n) { return n.ctx; }
];
Sk.ast.Load.prototype._astname = "Load";
Sk.ast.Load.prototype._isenum = true;
Sk.ast.Store.prototype._astname = "Store";
Sk.ast.Store.prototype._isenum = true;
Sk.ast.Del.prototype._astname = "Del";
Sk.ast.Del.prototype._isenum = true;
Sk.ast.AugLoad.prototype._astname = "AugLoad";
Sk.ast.AugLoad.prototype._isenum = true;
Sk.ast.AugStore.prototype._astname = "AugStore";
Sk.ast.AugStore.prototype._isenum = true;
Sk.ast.Param.prototype._astname = "Param";
Sk.ast.Param.prototype._isenum = true;
Sk.ast.Slice.prototype._astname = "Slice";
Sk.ast.Slice.prototype._fields = [
    "lower", function(n) { return n.lower; },
    "upper", function(n) { return n.upper; },
    "step", function(n) { return n.step; }
];
Sk.ast.ExtSlice.prototype._astname = "ExtSlice";
Sk.ast.ExtSlice.prototype._fields = [
    "dims", function(n) { return n.dims; }
];
Sk.ast.Index.prototype._astname = "Index";
Sk.ast.Index.prototype._fields = [
    "value", function(n) { return n.value; }
];
Sk.ast.And.prototype._astname = "And";
Sk.ast.And.prototype._isenum = true;
Sk.ast.Or.prototype._astname = "Or";
Sk.ast.Or.prototype._isenum = true;
Sk.ast.Add.prototype._astname = "Add";
Sk.ast.Add.prototype._isenum = true;
Sk.ast.Sub.prototype._astname = "Sub";
Sk.ast.Sub.prototype._isenum = true;
Sk.ast.Mult.prototype._astname = "Mult";
Sk.ast.Mult.prototype._isenum = true;
Sk.ast.MatMult.prototype._astname = "MatMult";
Sk.ast.MatMult.prototype._isenum = true;
Sk.ast.Div.prototype._astname = "Div";
Sk.ast.Div.prototype._isenum = true;
Sk.ast.Mod.prototype._astname = "Mod";
Sk.ast.Mod.prototype._isenum = true;
Sk.ast.Pow.prototype._astname = "Pow";
Sk.ast.Pow.prototype._isenum = true;
Sk.ast.LShift.prototype._astname = "LShift";
Sk.ast.LShift.prototype._isenum = true;
Sk.ast.RShift.prototype._astname = "RShift";
Sk.ast.RShift.prototype._isenum = true;
Sk.ast.BitOr.prototype._astname = "BitOr";
Sk.ast.BitOr.prototype._isenum = true;
Sk.ast.BitXor.prototype._astname = "BitXor";
Sk.ast.BitXor.prototype._isenum = true;
Sk.ast.BitAnd.prototype._astname = "BitAnd";
Sk.ast.BitAnd.prototype._isenum = true;
Sk.ast.FloorDiv.prototype._astname = "FloorDiv";
Sk.ast.FloorDiv.prototype._isenum = true;
Sk.ast.Invert.prototype._astname = "Invert";
Sk.ast.Invert.prototype._isenum = true;
Sk.ast.Not.prototype._astname = "Not";
Sk.ast.Not.prototype._isenum = true;
Sk.ast.UAdd.prototype._astname = "UAdd";
Sk.ast.UAdd.prototype._isenum = true;
Sk.ast.USub.prototype._astname = "USub";
Sk.ast.USub.prototype._isenum = true;
Sk.ast.Eq.prototype._astname = "Eq";
Sk.ast.Eq.prototype._isenum = true;
Sk.ast.NotEq.prototype._astname = "NotEq";
Sk.ast.NotEq.prototype._isenum = true;
Sk.ast.Lt.prototype._astname = "Lt";
Sk.ast.Lt.prototype._isenum = true;
Sk.ast.LtE.prototype._astname = "LtE";
Sk.ast.LtE.prototype._isenum = true;
Sk.ast.Gt.prototype._astname = "Gt";
Sk.ast.Gt.prototype._isenum = true;
Sk.ast.GtE.prototype._astname = "GtE";
Sk.ast.GtE.prototype._isenum = true;
Sk.ast.Is.prototype._astname = "Is";
Sk.ast.Is.prototype._isenum = true;
Sk.ast.IsNot.prototype._astname = "IsNot";
Sk.ast.IsNot.prototype._isenum = true;
Sk.ast.In.prototype._astname = "In";
Sk.ast.In.prototype._isenum = true;
Sk.ast.NotIn.prototype._astname = "NotIn";
Sk.ast.NotIn.prototype._isenum = true;
Sk.ast.comprehension.prototype._astname = "comprehension";
Sk.ast.comprehension.prototype._fields = [
    "target", function(n) { return n.target; },
    "iter", function(n) { return n.iter; },
    "ifs", function(n) { return n.ifs; },
    "is_async", function(n) { return n.is_async; }
];
Sk.ast.ExceptHandler.prototype._astname = "ExceptHandler";
Sk.ast.ExceptHandler.prototype._fields = [
    "type", function(n) { return n.type; },
    "name", function(n) { return n.name; },
    "body", function(n) { return n.body; }
];
Sk.ast.arguments.prototype._astname = "arguments";
Sk.ast.arguments.prototype._fields = [
    "args", function(n) { return n.args; },
    "vararg", function(n) { return n.vararg; },
    "kwonlyargs", function(n) { return n.kwonlyargs; },
    "kw_defaults", function(n) { return n.kw_defaults; },
    "kwarg", function(n) { return n.kwarg; },
    "defaults", function(n) { return n.defaults; }
];
Sk.ast.arg.prototype._astname = "arg";
Sk.ast.arg.prototype._fields = [
    "arg", function(n) { return n.arg; },
    "annotation", function(n) { return n.annotation; }
];
Sk.ast.keyword.prototype._astname = "keyword";
Sk.ast.keyword.prototype._fields = [
    "arg", function(n) { return n.arg; },
    "value", function(n) { return n.value; }
];
Sk.ast.alias.prototype._astname = "alias";
Sk.ast.alias.prototype._fields = [
    "name", function(n) { return n.name; },
    "asname", function(n) { return n.asname; }
];
Sk.ast.withitem.prototype._astname = "withitem";
Sk.ast.withitem.prototype._fields = [
    "context_expr", function(n) { return n.context_expr; },
    "optional_vars", function(n) { return n.optional_vars; }
];

